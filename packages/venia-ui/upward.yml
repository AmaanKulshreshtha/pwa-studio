# This is a top-level object used to set values for the root `status`,
# `headers`, and `body` properties.
# It is the first branch in an abstract decision tree, which ultimately
# resolves to an object that contains values for its own 'status', 'headers',
# and 'body' properties.
# This object uses a ConditionalResolver to determine the object value based
# on the URL pattern in the request object.
veniaResponse:
  resolver: conditional
  when:
    # Requests to graphql/rest endpoints, the media library, and cache are
    # handled by the top-level 'veniaProxy' object, which is a ProxyResolver
    # that passes the request through to the backing Magento server.
    - matches: request.url.pathname
      pattern: '^/(graphql|rest)(/|$)'
      use: veniaProxy
    - matches: fileExtension
      pattern: 'js'
      use: veniaBundles
    - matches: fileExtension
      pattern: '(json|png|svg|ico|css|txt)'
      use: veniaStatic
  default: veniaAppShell

# Contains the file extension--the part after the dot--of the URL path.
fileExtension:
  resolver: conditional
  when:
    - matches: request.url.pathname
      pattern: '^\.(.*)$'
      use: $match.$1
  default:
    inline: ''

# A ProxyResolver object that passes a request to the backend Magento
# server defined in the MAGENTO_BACKEND_URL environment variable.
# An UPWARD server infers this object as a ProxyResolver due to the presence
# of the 'target' property.
veniaProxy:
  resolver: proxy
  target: env.MAGENTO_BACKEND_URL
  # A local Magento install may have SSH configured and untrusted,
  # which is not a major concern, especially if containerized.
  ignoreSSLErrors:
    resolver: inline
    inline: true

# The veniaAppShell object resolves to a response that returns server-side
# rendered HTML containing the PWA application shell.
# For SEO purposes, the appropriate meta tags in the HTML head element are also
# set based on information about the resource.
# This object uses properties in the top-level 'veniaResource' object to return
# the appropriate response values.
veniaAppShell:
  resolver: inline
  inline:
    status:
      resolver: inline
      inline: 200
    headers:
      resolver: inline
      inline:
        content-type:
          inline: text/html
    body:
      resolver: file
      file:
        resolver: inline
        inline: './index.html'

# The veniaBundles object is a DirectoryResolver that allows access to the
# bundled files in the project's './dist' diretory.
#
# NOTE: The UPWARD server is able to interpret this entry as a
# DirectoryResolver because of the presence of the 'directory' property.
veniaBundles:
  resolver: directory
  directory:
    resolver: inline
    inline: '.'

# The veniaStatic object is a DirectoryResolver that allows access to the files
# inside the project's './static' directory.
veniaStatic:
  resolver: directory
  directory:
    resolver: inline
    inline: './static'

# This is a no-op at runtime; nothing refers to this context value in the rest
# of this file. It exists to declare that template evaluation requires _all_
# files in `./templates`, not just the ones detected by mention in this file.
# This is the only way that the UpwardIncludePlugin dependency detector can
# know about the _template partials_, which are only used inside template
# evaluation and cannot be easily statically analyzed by the plugin.
#
# TLDR: mentioning './templates' makes Webpack copy the whole dir into ./dist
veniaTemplateIncludes:
  resolver: directory
  directory:
    resolver: inline
    inline: './templates'
